worker_processes  1;
error_log stderr warn;
pid /run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main_timed  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            '$request_time $upstream_response_time $pipe $upstream_cache_status';

    access_log /dev/stdout main_timed;
    error_log /dev/stderr notice;

    keepalive_timeout  65;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen [::]:80 default_server;
        listen 80 default_server;

        # Please note that return is cheaper than redirect
        # See: https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#taxing-rewrites
        location / {
           return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        server_name _;

        # Use the internal DNS resolver of Docker
        resolver 127.0.0.11 valid=30s;

        root /var/www/html/public;

        ssl_certificate   /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/key.pem;

        # Filesize depending on your data
        client_max_body_size 100m;
        ### SSL Configuration

        # set http headers for maximum security... as far as possible anyway.
        # Verify security (if applicable) afterwards with https://securityheaders.com/
        # It is recommended to cut out the following settings and include as file
        # Uncomment if applicable:
        # include /etc/nginx/conf-include/http.header.configuration.conf;
        ### HTTP Header security
        # Remove token
        server_tokens off;

        # Set CSP
        # Please note that CSP are very tricky and can be quite advanced to get right
        # For most optimal security however they are absolutely mandatory
        # There are ways to 'override' them for easier development
        # However they should be carefully evaluated, defined and included
        #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' maps.googleapis.com www.googleoptimize.com; style-src 'self' 'unsafe-inline'; img-src 'self' 'unsafe-inline'; connect-src 'self' maps.googleapis.com" always;

        # Referrer Policy
        add_header Referrer-Policy same-origin;

        # Feature Policy && Permissions Policy
        # Note that Feature Policy is to be replaced with Permissions Policy
        # See W3C Document regarding setup: https://github.com/w3c/webappsec-permissions-policy/blob/master/permissions-policy-explainer.md
        #
        # Please check how to properly evaluate, define and include to your needs
        # Thanks to: https://fearby.com/article/set-up-feature-policy-referrer-policy-and-content-security-policy-headers-in-nginx/
        # For pre-writing these.
        add_header Feature-Policy "midi 'none';sync-xhr 'none';microphone 'none';camera 'none';magnetometer 'none';gyroscope 'none';fullscreen 'self';payment 'none';";
        add_header Permissions-Policy "midi=(), sync-xhr=(), microphone=(), camera=(), magnetometer=(), gyroscope=(), fullscreen=(self), payment=()";

        # set X-Frame-Options
        add_header X-Frame-Options "SAMEORIGIN" always;

        # set Xss-Protection
        add_header X-Xss-Protection "1; mode=block" always;

        # X-Content-Type-Options
        add_header X-Content-Type-Options "nosniff" always;

        location /storage {
            alias /var/www/html/storage;
        }

        # Laravel Reverb
        # The Websocket Client/Laravel Echo would connect and listen to this
        location ~ /app/(?<reverbkey>.*) { # variable reverbkey
          proxy_pass http://reverb:8080/app/$reverbkey;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade; # Use the mapped value
          proxy_set_header Host $host; # Use $host instead of $http_host sometimes needed
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme; # Ensure this is present
          proxy_set_header X-Forwarded-Host $host; # Good practice
          proxy_set_header X-Forwarded-Port $server_port; # Good practice
                      # Increase timeouts for long-lived connections
                      proxy_connect_timeout 7d; # Example: 7 days
                      proxy_send_timeout    7d;
                      proxy_read_timeout    7d;

                      # Disable buffering for real-time communication
                      proxy_buffering off;
        }

        # The Laravel Backend would broadcast to this
        location ~ ^/apps/(?<reverbid>[^/]+)/events$ { # variable reverbid
          proxy_pass http://reverb:8080/apps/$reverbid/events;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }

		location / {
		    try_files $uri $uri/ /index.php?$query_string;
		    index index.php index.html index.htm;
		    location ~ .php$ {

		        fastcgi_pass   app:9000;
		        fastcgi_index  index.php;
		        fastcgi_param  SCRIPT_FILENAME  /var/www/html/public/index.php;
		        include        fastcgi_params;

		    }
		}

        # nginx Status
        # see: https://nginx.org/en/docs/http/ngx_http_stub_status_module.html
        location /nginx-status {
            allow 127.0.0.1;
            deny all;
            access_log off;
            stub_status;
        }
    }
}
